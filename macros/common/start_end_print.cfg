[gcode_macro _START_PRINT]
description:
  EXTRUDER_TEMP - температура экструдера
  BED_TEMP - температура стола
  CHAMBER_TEMP - температура термокамеры

  Пример использования:
    CURA:  _START_PRINT EXTRUDER_TEMP= BED_TEMP= START_CHAMBER_TEMP= CHAMBER_TEMP= INITIAL_TOOL= X1=
    PRUSA: _START_PRINT EXTRUDER_TEMP={first_layer_temperature[0]},{first_layer_temperature[1]} BED_TEMP=[first_layer_bed_temperature] START_CHAMBER_TEMP=[chamber_temperature] CHAMBER_TEMP=[chamber_minimal_temperature] INITIAL_TOOL={initial_tool} X1={first_layer_print_max[0]} 
    ORCA: _START_PRINT EXTRUDER_TEMP={first_layer_temperature[0]},{first_layer_temperature[1]} BED_TEMP=[first_layer_bed_temperature] START_CHAMBER_TEMP=[overall_chamber_temperature] CHAMBER_TEMP=[overall_chamber_temperature] INITIAL_TOOL={initial_tool} X1={first_layer_print_max[0]}
gcode:
  CLEAR_PAUSE
  _LED_STATE STATE=printing
  # --- Параметры из слайсера ---
  {% set raw_temp = params.EXTRUDER_TEMP %}
  {% if ',' in raw_temp %}
    {% set extruder_temp = raw_temp.split(',') | map('float') | list %}
  {% else %}
    {% set extruder_temp = [raw_temp | float] %}
  {% endif %}
  {% set bed_temp = params.BED_TEMP|float %}
  {% set chamber_temp = params.CHAMBER_TEMP|float %}
  {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}
  {% set x1 = params.X1|float %}

  # --- Конфигурационные границы ---
  {% set x_max = printer.configfile.config.stepper_x.position_max|float %}
  {% set dc_max = printer.configfile.config.dual_carriage.position_max|float if printer.configfile.config.dual_carriage is defined else x_max %}

  # --- Определение области печати текущего режима ---
  {% set current_mode = printer["gcode_macro _IDEX_MODE"].mode %}
  {% if current_mode == "primary" %}
    {% set x_limit = x_max %}
  {% elif current_mode == "copy" %}
    {% set x_limit = x_max / 2 %}
  {%  elif current_mode == "mirror" %}
    {% set x_limit = ( (x_max / 2) - ( (dc_max - x_max) / 2 ) ) %}
  {% endif %}

  {% if x1 <= x_limit %}
    # --- Обработка по режимам ---
    {% if current_mode == "primary" %}
      {% set fil_det = 
        (initial_tool == 0 and printer['filament_switch_sensor 0'].filament_detected and printer['filament_switch_sensor 0'].enabled) or
        (initial_tool == 1 and printer['filament_switch_sensor 1'].filament_detected and printer['filament_switch_sensor 1'].enabled)
      %}
      {% if fil_det %}
        _IDEX_INFO
        G28
        T{initial_tool}
        M191 S{chamber_temp}
        M190 S{bed_temp}
        _ACTIVATE_MODE MODE=primary
        M109 S{extruder_temp[initial_tool] * 0.8} T0
        BED_MESH_CALIBRATE
        M104 S0 T0
        M109 S{extruder_temp[initial_tool]} T{initial_tool}
      {% else %}
        RESPOND TYPE=error MSG="Отсутсвует филамент в Экструдере {initial_tool}"
        CANCEL_PRINT
      {% endif %}
      
    {% elif current_mode == "copy" or current_mode == "mirror" %}
      {% if initial_tool == 0 %}
        {% set fil_det = 
          (initial_tool == 0 and printer['filament_switch_sensor 0'].filament_detected and printer['filament_switch_sensor 0'].enabled) and
          (printer['filament_switch_sensor 1'].filament_detected and printer['filament_switch_sensor 1'].enabled)
        %}
        M118 {fil_det}
        {% if fil_det %}
          _IDEX_INFO
          G28
          M191 S{chamber_temp}
          M190 S{bed_temp}
          M109 S{extruder_temp[initial_tool] * 0.8} T0
          _CALIBRATE_Z_HEIGHT
          M104 S0 T0
          M104 S{extruder_temp[0]} T0
          M104 S{extruder_temp[1]} T1
          M109 S{extruder_temp[0]} T0
          M109 S{extruder_temp[1]} T1
          _ACTIVATE_MODE MODE={current_mode}
        {% else %}
          RESPOND TYPE=error MSG="Отсутсвует филамент"
          CANCEL_PRINT
        {% endif %}
      {% else %}
        RESPOND TYPE=error MSG="Выбран {initial_tool + 1} экструдер, смените на первый!"
        CANCEL_PRINT
      {% endif %}
      _LED_STATE STATE=printing
    {% else %}
      RESPOND TYPE=error MSG="Неверное расположение детали({x_limit}), либо некорректный режим печати."
      CANCEL_PRINT
    {% endif %}
  {% endif %}


[gcode_macro _END_PRINT]
gcode:
  G92 E0
  G90 
  G1 Z{ printer.configfile.config.stepper_z.position_endstop|int - 3 } F{ printer.configfile.settings.printer.max_z_velocity*60}
  G28 X
  M84 ;выключить моторы
	TURN_OFF_HEATERS
  _LED_STATE STATE=done
  RESPOND  MSG="Печать завершена!"
  SET_IDLE_TIMEOUT TIMEOUT=600

[gcode_macro POST_COOLING_CYCLE] 
description:
  Макрос цикла пост-остывания
  DPH - на сколько охлаждать за 1 час 
  STEP - шаг охлаждения 
  START - начальное значение 
  END - конечное значение 
  Пример использования: POST_COOLING_CYCLE START=180 END=50
gcode: 
  {% set DPH = params.DPH|default(60)| int %} 
  {% set STEP = params.STEP|default(-2)| int %} 
  {% set START = params.START|default(75)| int %} 
  {% set END = params.END |default(30)| int %} 
 
  _PARK_{printer.toolhead.extruder}
  {% if START < END and STEP < 0 %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, STEP( %s ) должен быть %s " % (STEP, STEP | abs))} 
  {% elif START > END and STEP > 0 %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, STEP( %s ) должен быть %s " % (STEP, -STEP))} 
  {% elif START == END %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, START( %s ) не может быть равен END(%s) %s " % (START, END))} 
  {% elif STEP == 0 or DPH <= 0 %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, STEP( %s ) или DPH( %s ) не может быть 0 " % (STEP, DPH))} 
 
  {% else %}  
    {% if "xyz" in printer.toolhead.homed_axes %} 
      G90 
      G1 Z{printer.configfile.config.stepper_z.position_endstop} 
    {% endif %}
    TURN_OFF_HEATERS
    M107
    {% if START > END %}
      RESPOND TYPE=echo MSG="Цикл плавного охлаждения до {END}°C запущен!"
      RESPOND TYPE=echo MSG="Начальное значение {START}°C, шаг охлаждения: {STEP}°C, скорость охлаждения: {DPH}°C/час"
      {% for temp in range(START, END, STEP) %} 
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={temp}
        TEMPERATURE_WAIT SENSOR='heater_generic chamber' MAXIMUM={temp}
        G4 P{3600 / DPH * 1000} 
      {% endfor %} 
    {% else %}
      RESPOND TYPE=echo MSG="Цикл плавного нагрева до {END}°C запущен!"
      RESPOND TYPE=echo MSG="Начальное значение {START}°C, шаг нагрева: {STEP}°C, скорость нагрева: {DPH}°C/час"
      {% for temp in range(START, END, STEP) %}
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={temp}
        TEMPERATURE_WAIT SENSOR='heater_generic chamber' MINIMUM={temp} 
        G4 P{3600 / DPH * 1000} 
      {% endfor %} 
    {% endif %}
  RESPOND TYPE=echo MSG="Цикл завершен!"
  {% endif %}