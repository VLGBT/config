# [gcode_macro DUMP_SENSORS]
# gcode:
#   {action_respond_info(printer.heaters.available_heaters|join(', '))}
#   {action_respond_info(printer.heaters.available_sensors|join(', '))}
# [gcode_macro SET_GCODE_OFFSET]
# rename_existing: SET_GCODE_OFFSET_ORIG
# variable_restored: False  # Mark whether the var has been restored from NVM
# variable_runtime_offset: 0
# gcode:
#   {% if params.Z_ADJUST %}
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
#   {% endif %}
#   {% if params.Z %} 
#     {% set paramList = rawparams.split() %}
#     {% for i in range(paramList|length) %}
#       {% if paramList[i]=="Z=0" %}
#         {% set temp=paramList.pop(i) %}
#         {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
#         {% if paramList.append(temp) %}{% endif %}
#       {% endif %}
#     {% endfor %}
#     {% set rawparams=paramList|join(' ') %}
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
#   {% endif %}
#   SET_GCODE_OFFSET_ORIG { rawparams }

# [gcode_macro TOOLSHIFT]
# gcode:
#   {% if printer.configfile.config.dual_carriage is defined %}
#       {% if printer.dual_carriage.carriage_0 == "PRIMARY" %}
#         {% set dist = printer.configfile.config.dual_carriage.position_endstop|int - printer.toolhead.position.x|int %}
#         SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#         SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
#         {% if printer.toolhead.position.x|int >= printer.configfile.config.stepper_x.position_max|int / 2  %} #Каретка по середине или правее?
#           SAVE_GCODE_STATE NAME=activate1
#           G90
#           G1 X{printer.toolhead.position.x|int - dist} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=activate1
#           SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#           SAVE_GCODE_STATE NAME=park0
#           G90
#           G1 X{printer.configfile.config.stepper_x.position_endstop|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
#           RESTORE_GCODE_STATE NAME=park0
#         {% else %}
#           SAVE_GCODE_STATE NAME=park0
#           G90
#           G1 X{printer.configfile.config.stepper_x.position_endstop|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=park0
#           SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
#           SAVE_GCODE_STATE NAME=activate1
#           G90
#           G1 X{dist} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=activate1
#         {% endif %}
#       {% endif %}

#       {% if printer.dual_carriage.carriage_1 == "PRIMARY" %}
#         {% set dist = printer.toolhead.position.x|int - printer.configfile.config.stepper_x.position_endstop|int %}
#         SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#         SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
#         {% if printer.toolhead.position.x|int >= printer.configfile.config.stepper_x.position_max|int / 2  %}
#           SAVE_GCODE_STATE NAME=activate1
#           G90
#           G1 X{printer.configfile.config.dual_carriage.position_endstop|int - printer.toolhead.position.x|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=activate1
#           SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#           SAVE_GCODE_STATE NAME=park0
#           G90
#           G1 X{dist} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
#           RESTORE_GCODE_STATE NAME=park0
#         {% else %}
#           SAVE_GCODE_STATE NAME=park0
#           G90
#           G1 X{printer.toolhead.position.x|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=park0
#           SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
#           SAVE_GCODE_STATE NAME=activate1
#           G90
#           G1 X{printer.configfile.config.dual_carriage.position_endstop|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#           RESTORE_GCODE_STATE NAME=activate1
#         {% endif %}
#       {% endif %}

#   {% endif %}

# [screws_tilt_adjust]
# screw1: 100,100
# #   The (X, Y) coordinate of the first bed leveling screw. This is a
# #   position to command the nozzle to so that the probe is directly
# #   above the bed screw (or as close as possible while still being
# #   above the bed). This is the base screw used in calculations. This
# #   parameter must be provided.
# screw1_name:Левый
# #   An arbitrary name for the given screw. This name is displayed when
# #   the helper script runs. The default is to use a name based upon
# #   the screw XY location.
# screw2:150,150
# screw2_name: Правый
# #...
# #   Additional bed leveling screws. At least two screws must be
# #   defined.
# #speed: 50
# #   The speed (in mm/s) of non-probing moves during the calibration.
# #   The default is 50.
# #horizontal_move_z: 5
# #   The height (in mm) that the head should be commanded to move to
# #   just prior to starting a probe operation. The default is 5.
# #screw_thread: CW-M3
# #   The type of screw used for bed leveling, M3, M4, or M5, and the
# #   rotation direction of the knob that is used to level the bed.
# #   Accepted values: CW-M3, CCW-M3, CW-M4, CCW-M4, CW-M5, CCW-M5.
# #   Default value is CW-M3 which most printers use. A clockwise
# #   rotation of the knob decreases the gap between the nozzle and the
# #   bed. Conversely, a counter-clockwise rotation increases the gap.
