[gcode_macro _TURN_OFF]
gcode:
  SET_LED LED=LED WHITE=0
  TURN_OFF_HEATERS
  M107
  M84
  CLEAR_PAUSE
  
[delayed_gcode init_shaper]
initial_duration: 0.1
gcode:
  SET_DUAL_CARRIAGE CARRIAGE=1
  SET_INPUT_SHAPER SHAPER_TYPE_X=<dual_carriage_shaper> SHAPER_FREQ_X=<dual_carriage_freq> SHAPER_TYPE_Y=<y_shaper> SHAPER_FREQ_Y=<y_freq>
  SET_DUAL_CARRIAGE CARRIAGE=0
  SET_INPUT_SHAPER SHAPER_TYPE_X=<primary_carriage_shaper> SHAPER_FREQ_X=<primary_carriage_freq> SHAPER_TYPE_Y=<y_shaper> SHAPER_FREQ_Y=<y_freq>
  
[gcode_macro POST_COOLING_CYCLE] 
description:
  Макрос цикла пост-остывания
  DPH - на сколько охлаждать за 1 час 
  STEP - шаг охлаждения 
  START - начальное значение 
  END - конечное значение 
  Пример использования: POST_COOLING_CYCLE START=180 END=50
gcode: 
  {% set DPH = params.DPH|default(60)| int %} 
  {% set STEP = params.STEP|default(-2)| int %} 
  {% set START = params.START|default(75)| int %} 
  {% set END = params.END |default(30)| int %} 
 
  _PARK_{printer.toolhead.extruder}
  {% if START < END and STEP < 0 %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, STEP( %s ) должен быть %s " % (STEP, STEP | abs))} 
  {% elif START > END and STEP > 0 %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, STEP( %s ) должен быть %s " % (STEP, -STEP))} 
  {% elif START == END %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, START( %s ) не может быть равен END(%s) %s " % (START, END))} 
  {% elif STEP == 0 or DPH <= 0 %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, STEP( %s ) или DPH( %s ) не может быть 0 " % (STEP, DPH))} 
 
  {% else %}  
    {% if "xyz" in printer.toolhead.homed_axes %} 
      G90 
      G1 Z{printer.configfile.config.stepper_z.position_endstop} 
    {% endif %}
    M104 S0 ;выключить нагреватель хотэнда
    M140 S0 ;выключить нагреватель стола
    M106 S0 ;выключить вентилятор обдува модели
    SET_HEATER_TEMPERATURE HEATER=DAS TARGET=0
    {% if START > END %} 
      {% for temp in range(START, END, STEP) %} 
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={temp} 
        TEMPERATURE_WAIT SENSOR='heater_generic chamber' MAXIMUM={temp} 
        G4 P{3600 / DPH * 1000} 
      {% endfor %} 
    {% else %} 
      {% for temp in range(START, END, STEP) %} 
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={temp} 
        TEMPERATURE_WAIT SENSOR='heater_generic chamber' MINIMUM={temp} 
        G4 P{3600 / DPH * 1000} 
      {% endfor %} 
    {% endif %}   
  {% endif %}

# [gcode_macro DUMP_SENSORS]
# gcode:
#   {action_respond_info(printer.heaters.available_heaters|join(', '))}
#   {action_respond_info(printer.heaters.available_sensors|join(', '))}
  
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing:SET_HEATER_TEMPERATURE1
gcode:
  {% set HEATER=params.HEATER|string %}
  {% set TARGET=params.TARGET|float %}

  {% if HEATER == "DAS" %}
    {% if TARGET <= 0 %}
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET=0
    {% elif TARGET <= 400 %}
      {% if printer['fan_generic extruder_fan'].speed <= 0  %}
      SET_FAN_SPEED FAN=extruder_fan SPEED=0.5
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
      {% else %}
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
      {% endif %}
    {% else %}
      RESPOND TYPE=error MSG="Невозможно установить выше максимума 400"
    {% endif %}  

  {% elif HEATER == "extruder" %}
    {% if TARGET <= 500 %}
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
    {% else %}
      RESPOND TYPE=error MSG="Невозможно установить выше максимума 500"
    {% endif %}

    {% elif HEATER == "extruder1" %}
    {% if TARGET <= 500 %}
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
    {% else %}
      RESPOND TYPE=error MSG="Невозможно установить выше максимума 500"
    {% endif %}

    {% elif HEATER == "heater_bed" %}
    {% if TARGET <= 200 %}
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
    {% else %}
      RESPOND TYPE=error MSG="Невозможно установить выше максимума 200"
    {% endif %}

    {% elif HEATER == "heater_bed0" %}
    {% if TARGET <= 200 %}
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
      SET_HEATER_TEMPERATURE1 HEATER=heater_bed1 TARGET={TARGET}
    {% else %}
      RESPOND TYPE=error MSG="Невозможно установить выше максимума 200"
    {% endif %}

    {% elif HEATER == "heater_bed1" %}
    {% if TARGET <= 200 %}
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
      SET_HEATER_TEMPERATURE1 HEATER=heater_bed0 TARGET={TARGET}
    {% else %}
      RESPOND TYPE=error MSG="Невозможно установить выше максимума 200"
    {% endif %}

  {% elif HEATER == "chamber" %}
    {% if TARGET <= 250 %}
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
    {% else %}
      RESPOND TYPE=error MSG="Невозможно установить выше максимума 250"
    {% endif %}
  {% else %}
  SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
  {% endif %}
[gcode_macro M140]
# rename_existing: M140.1
gcode:
      SET_HEATER_TEMPERATURE HEATER=heater_bed0 TARGET={params.S|default(0)|float}

[gcode_macro M190]
# rename_existing: M190.1
gcode:
      SET_HEATER_TEMPERATURE HEATER=heater_bed0 TARGET={params.S|default(0)|float}
      TEMPERATURE_WAIT SENSOR="heater_generic heater_bed0" MINIMUM={params.S}  
   

# [gcode_macro M140]
# rename_existing: M140.1
# gcode:
#       SET_HEATER_TEMPERATURE1 HEATER=heater_bed0 TARGET={params.S|default(0)|float}
#       SET_HEATER_TEMPERATURE1 HEATER=heater_bed1 TARGET={params.S|default(0)|float}
# [gcode_macro M190]
# rename_existing: M190.1
# gcode:
#       SET_HEATER_TEMPERATURE1 HEATER=heater_bed0 TARGET={params.S|default(0)|float}
#       SET_HEATER_TEMPERATURE1 HEATER=heater_bed1 TARGET={params.S|default(0)|float}
#       TEMPERATURE_WAIT SENSOR='heater_generic heater_bed0' MINIMUM={params.S|default(0)|float}  
#       TEMPERATURE_WAIT SENSOR='heater_generic heater_bed1' MINIMUM={params.S|default(0)|float}     


[gcode_macro M109]
rename_existing: M109.1
gcode:
  {% set extruder = "extruder" ~ params.T|replace('0', '')
     if "T" in params else printer.toolhead.extruder %}
  SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={params.S|default(0)|float}
  TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={params.S|default(0)|float}

[gcode_macro M104]
rename_existing: M104.1
gcode:
  {% set extruder = "extruder" ~ params.T|replace('0', '')
     if "T" in params else printer.toolhead.extruder %}
  SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={params.S|default(0)|float}
[gcode_macro M141]
gcode:
  SET_HEATER_TEMPERATURE HEATER=chamber TARGET={params.S|default(0)|float}

[gcode_macro M191]
gcode:
  SET_HEATER_TEMPERATURE HEATER=chamber TARGET={params.S|default(0)|float}
  TEMPERATURE_WAIT SENSOR='heater_generic chamber' MINIMUM={params.S|default(0)|float}
[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}
[gcode_macro SET_FAN_SPEED]
rename_existing:SET_FAN_SPEED1
gcode:
  {% if params.SPEED|float <= 0 %}
    {% if printer.configfile.config['heater_generic DAS'] is defined %}
      SET_HEATER_TEMPERATURE HEATER=DAS TARGET=0
    {% endif %}
  {% endif %}
    SET_FAN_SPEED1 FAN={params.FAN} SPEED={params.SPEED}

[gcode_macro M106]
# rename_existing: M106.1
variable_last_speed: 0 # переменная хранящая последнюю заданную скорость, используется в IDEX 
gcode:
  {% set s = params.S|default(255)|int %}
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=last_speed VALUE={s}
  {% set speed = s / 255|float %} #перевод диапазона значений от 0..255 в 0..1
        SET_FAN_SPEED FAN={printer.toolhead.extruder}_fan SPEED={speed}


[gcode_macro M107]
gcode:
  M106 S0

[gcode_macro _HOME_X]
gcode:
  {% if "y" not in printer.toolhead.homed_axes %}
        _HOME_Y
  {% endif %}
    G33 X
    {% if printer.configfile.config.dual_carriage is defined %}
      ACTIVATE_MIRROR_MODE
      SET_DUAL_CARRIAGE CARRIAGE=0
      G91
      G1 X5 F1200
      IDEX_PRIMARY_MODE
    {% else %}
      G91
      G1 X5 F1200
    {% endif %}
    G4 P2000

[gcode_macro _HOME_Y]
gcode:
    G33 Y
    G91
    G1 Y5 F1200
    G4 P2000
# [gcode_macro _HOME_Z]
# gcode:
#     {% if "xy" not in printer.toolhead.homed_axes %}
#         _HOME_X
#     {% endif %}
#     G90
#     G1 X{printer.configfile.config.stepper_x.position_max|int / 2} Y{printer.configfile.config.stepper_y.position_max|int / 2} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}   #printer.configfile.config.stepper_x.position_max|int / 2
#     G33 Z
#     G90
#     G1 Z10 F{printer.configfile.config.stepper_z.homing_speed|int*60} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#     _PARK_extruder
#     G1 Y{printer.configfile.config.stepper_y.position_max} 

[gcode_macro G28]
rename_existing:G33
gcode:
    {% if 'X' in params %}
      _HOME_X
                #_HOME_Y
    {% elif 'Y' in params %}
      _HOME_Y
    {% elif 'Z' in params %}
      # _HOME_Z
      G33 Z
    {% else %}
      _HOME_Y
      _HOME_X
      # _HOME_Z
      G33 Z
      G90
      _PARK_extruder
      G1 Y{printer.configfile.config.stepper_y.position_max} F{printer.configfile.config.stepper_y.homing_speed|int*60*2}
    {% endif %}


[gcode_macro _PARK_extruder]
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    {% if "x" in printer.toolhead.homed_axes %}
      SAVE_GCODE_STATE NAME=park0
      SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
      G90
      G1 X{printer.configfile.config.stepper_x.position_endstop|int + 5 } F{printer.configfile.config.stepper_x.homing_speed|int*60*2}     
      RESTORE_GCODE_STATE NAME=park0
    {% endif %}
  {% endif %}
[gcode_macro _PARK_extruder1]
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    {% if "x" in printer.toolhead.homed_axes %}
      SAVE_GCODE_STATE NAME=park1
      SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
      G90
      G1 X{printer.configfile.config.dual_carriage.position_endstop|int - 5 } F{printer.configfile.config.dual_carriage.homing_speed|int*60*2}
      RESTORE_GCODE_STATE NAME=park1
    {% endif %}
  {% endif %}
[gcode_macro T0]
description: Выбор каретки 0 (левая)
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    # в зеркальном и копи режиме на команду Т0 не паркуем 2ю каретку:
    {% if printer["dual_carriage"].carriage_1 == "PRIMARY" or printer["dual_carriage"].carriage_1 == "INACTIVE"  %} 
      # Паркуем вторую каретку:
      _PARK_extruder1
    {% endif %}
    SET_DUAL_CARRIAGE CARRIAGE=0  
    # выключаем ненужный и включаем нужный фидер:
    SET_STEPPER_ENABLE STEPPER=extruder  ENABLE=1
    # SET_STEPPER_ENABLE STEPPER=extruder1 ENABLE=0
    # активируем нужный экструдер:
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    M106 S{printer["gcode_macro M106"].last_speed}
    _APPLY_OFFSETS
  {% endif %}

[gcode_macro T1]
description: Выбор каретки 1 (правая)
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    {% if printer.dual_carriage.carriage_0 == "PRIMARY" %}
      _PARK_extruder
    {% endif %}
    SET_DUAL_CARRIAGE CARRIAGE=1
    # выключаем ненужный и включаем нужный фидер:
    SET_STEPPER_ENABLE  STEPPER=extruder1 ENABLE=1
    SET_STEPPER_ENABLE  STEPPER=extruder  ENABLE=0
    # активируем нужный экструдер:
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    # синхронизируем вентиляторы:
    M106 S{printer["gcode_macro M106"].last_speed}
    _APPLY_OFFSETS
  {% endif %}

[gcode_macro INFO_OFFSETS]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set current_x1 =  svv.get("extruder1_offset_x") |float %}
  {% set current_y1 =  svv.get("extruder1_offset_y") |float %}
  {% set current_z1 =  svv.get("extruder1_offset_z") |float %} 
  RESPOND MSG="X1={current_x1} Y1={current_y1} Z1={current_z1}"
[gcode_macro SET_OFFSETS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if 'X1' in params and params.X1!="" %}
        {% set new_offset_x1 = params.X1|float %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_x VALUE={new_offset_x1}
        RESPOND MSG="Новое смещение второго экструдера по X равно {new_offset_x1}"
    {%endif%}
    {% if 'Y1' in params and params.Y1!="" %}
        {% set new_offset_y1 = params.Y1|float %}
        SAVE_VARIABLE VARIABLE=extruder1_offset_y VALUE={new_offset_y1}
        RESPOND MSG="Новое смещение второго экструдера по Y равно {new_offset_y1}"
    {%endif%}

[gcode_macro _APPLY_OFFSETS]
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    {% set svv = printer.save_variables.variables %}
    {% set x1 = svv.get("extruder1_offset_x") |float %}
    {% set y1 = svv.get("extruder1_offset_y") |float %}
    {% set z1 = svv.get("extruder1_offset_z") |float %}
    {% if printer.toolhead.extruder == "extruder"%}
      SET_GCODE_OFFSET X=0 Y=0 MOVE=0 # Z=0 
    {% else %}
      SET_GCODE_OFFSET X={x1} Y={y1} MOVE=0 #Z={z1}
    {%endif%}
  {% endif %}
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  {% set other_extruder = printer.toolhead.extruder %}
  T0
  BED_MESH_CALIBRATE_BASE ADAPTIVE=1 # PROFILE={printer.['heater_bed0'].target|string if printer.['heater_bed0'].target|int > 0 else "Текущий" }
  _PARK_extruder
  T{ "0" if other_extruder == "extruder" else "1" }
  RESPOND  MSG="Калибровка сетки стола завершена"

[gcode_macro ACTIVATE_COPY_MODE]
description: Активация режима копирования
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    T0
    _PARK_extruder
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    SAVE_GCODE_STATE NAME=park1
    G90
    G1 X{(printer.configfile.config.stepper_x.position_max|int / 2) - 100} F{printer.configfile.config.dual_carriage.homing_speed|int*60*3}
    RESTORE_GCODE_STATE NAME=park1
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    # синхронизируем вентиляторы:
    M106 S{printer["gcode_macro M106"].last_speed}
  {% endif %}
[gcode_macro ACTIVATE_MIRROR_MODE]
description: Активация режима зеркального копирования
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    T0
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    _PARK_extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    # синхронизируем вентиляторы:
    M106 S{printer["gcode_macro M106"].last_speed}
  {% endif %}
[gcode_macro IDEX_PRIMARY_MODE]
description: Активация режима независимого управления каретками
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    _PARK_extruder1
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=''
    _PARK_extruder
    T0
  {% endif %}

[gcode_macro _START_PRINT]
description:
  EXTRUDER_TEMP - Значение температуры экструдера
  BED_TEMP - Значение температуры стола
  CHAMBER_TEMP - Значение температуры термокамеры
  MODE - COPY или MIRROR
  Пример использования:
    CURA:  _START_PRINT MODE=COPY/MIRROR
    PRUSA: _START_PRINT MODE=COPY/MIRROR
    ORCA: ...COMING_SOON...
gcode:
  CLEAR_PAUSE
  {% set mode = params.MODE %}
  {% if 'MODE' in params and params.MODE!="" %}
    G28
    {% if mode == "MIRROR" %}
      M109 S{printer.extruder.target} T0
      M109 S{printer.extruder.target} T1
      # IDEX_UNSYNC_TEMP
      ACTIVATE_MIRROR_MODE
    {% elif mode =="COPY" %}
      M109 S{printer.extruder.target} T0
      M109 S{printer.extruder.target} T1
      T0
      T1
      ACTIVATE_COPY_MODE
    {% endif %}
  {% else %}
    BED_MESH_CALIBRATE
  {% endif %}    
   RESPOND  MSG="Запуск печати!"

[gcode_macro _END_PRINT]
gcode:
  G92 E0
  TURN_OFF_HEATERS
  G90 
  G1 Z{printer.configfile.config.stepper_z.position_max|int - 2 } F{printer.configfile.settings.printer.max_z_velocity*60}
  G28 X
  M84 ;выключить моторы
  RESPOND  MSG="Печать завершена!"

[gcode_macro PID_CALIBRATE]
rename_existing:PID_CALIBRATE_BASE
gcode:
  {% set heater = params.HEATER|string %}
  {% set target = params.TARGET|float %}
  {% if heater == "extruder" %}
    # T0
    # SET_FAN_SPEED FAN=extruder_fan SPEED=1
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}

  {% elif heater == "extruder1" %}  
    # T1
    # SET_FAN_SPEED FAN=extruder1_fan SPEED=1
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}

  {% elif heater == "DAS" %}
    T0
    SET_FAN_SPEED FAN=extruder_fan SPEED={printer.configfile.config["fan_generic extruder_fan"].off_below}
    PID_CALIBRATE_BASE HEATER=DAS TARGET={target}
  {% elif heater == "DAS1" %}
    T1
    SET_FAN_SPEED FAN=extruder1_fan SPEED={printer.configfile.config["fan_generic extruder_fan"].off_below}
    PID_CALIBRATE_BASE HEATER=DAS1 TARGET={target}

  {% elif heater == "heater_bed" %}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% elif heater == "heater_bed0" %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={target}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% elif heater == "heater_bed1" %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed0 TARGET={target}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}

  {% elif heater == "chamber" %}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% endif %}
    TURN_OFF_HEATERS
    RESPOND MSG="Калибровка PID {heater} на температуру {target} завершена !"
    G4 P5000
    M107
    SAVE_CONFIG

[gcode_macro CANCEL_PRINT]
description: Отмена текущей печати
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  M107
  G90 
  G1 Z{printer.configfile.config.stepper_z.position_max|int - 2 } F{printer.configfile.settings.printer.max_z_velocity*60}
  _PARK_{printer.toolhead.extruder}
  M84
  RESPOND TYPE=error MSG=" Печать отменена !"
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_extrude: 1.0
gcode:
  {% if printer.print_stats.filename != "" %}
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% if printer.toolhead.extruder == "extruder"%}
      {% set x_park = printer.configfile.config.stepper_x.position_endstop|int %}
    {% else %}
      {% set x_park = printer.configfile.config.dual_carriage.position_endstop|int %}
    {% endif %}
      ##### calculate save lift position #####
      {% set max_z = printer.configfile.config.stepper_z.position_max|float %}
      {% set act_z = printer.toolhead.position.z|float %}
      {% if act_z < (max_z - 20) %}
         {% set z_safe = 20 %}
      {% else %}
         {% set z_safe = max_z - act_z %}
     {% endif %}
      PAUSE_BASE
     M118 Пауза!
     G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{E} F2100
     {% else %}
       {action_respond_info("Экструдер недостаточно горячий")}
     {% endif %}
      {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe} F{printer.configfile.config.stepper_z.homing_speed|int*60}
        G90
        G1 X{x_park} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
      {% else %}
        {action_respond_info("Парковка не выполнена")}
      {% endif %}

  {% endif %}
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {% else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Экструдер недостаточно горячий")}
    {% endif %}  
    RESUME_BASE {get_params}
    M118 Продолжение печати!

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  75
gcode:
    {% set speed = params.SPEED|default(450) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{speed} ; extrude with 7.5mm/s
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  75
gcode:
    {% set speed = params.SPEED|default(450) %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E-{unload_distance} F{speed} ; unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro REMOVE_USB]
description: Извлечение флешки USB
gcode:
    RUN_SHELL_COMMAND CMD=REMOVE

[gcode_macro INSTALL_USB]
description: Монтирование флешки USB
gcode:
    RUN_SHELL_COMMAND CMD=INSTALL

