[include template_macros.cfg]

[gcode_macro IDEX_MODE]
variable_mode_single: True
variable_mode_copy: False
variable_mode_mirror: False
gcode:
	{% if printer.configfile.config.dual_carriage is defined %}
    {% set valid_modes = ['primary', 'copy', 'mirror'] %}
    {% set requested_mode = params.MODE|default('')|string|lower %}

    {% if requested_mode in valid_modes %}
			{% for mode in valid_modes %}
        SET_GCODE_VARIABLE MACRO=IDEX_MODE VARIABLE=mode_{mode} VALUE={ 'True' if mode == requested_mode else 'False' }
      {% endfor %}
			_IDEX_INFO
    {% else %}
			RESPOND TYPE=error MSG="Неверный режим! Доступные режимы: Основной(primary), Копирующий(mirror), Зеркальный(copy)."
    {% endif %}
      RESPOND TYPE=command MSG="action:prompt_end"
  {% else %}
      RESPOND TYPE=error MSG="IDEX режимы не доступны."
  {% endif %}

[gcode_macro _IDEX_INFO]
gcode:
  {% set modes = {
      "mode_single": "Основной",
      "mode_copy": "Копирующий",
      "mode_mirror": "Зеркальный"
  } %}

  {% for var, name in modes.items() %}
      {% if printer["gcode_macro IDEX_MODE"][var] %}
          RESPOND MSG="Текущий режим: { name }"
      {% endif %}
  {% endfor %}

[gcode_macro _CALIBRATE_Z_HEIGHT]
gcode:
	G90
	G1 Z20 F1200
	G1 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F{printer.toolhead.max_velocity * 60 / 2}
	PROBE
	_ADJUST_Z_HEIGHT
	G1 Z5 F1200

[gcode_macro _ADJUST_Z_HEIGHT]
gcode:
	SET_GCODE_OFFSET Z={printer.probe.last_z_result - (printer.configfile.settings.probe.z_offset|float)}

[gcode_macro _TURN_OFF]
gcode:
  SET_LED LED=LED WHITE=0
  TURN_OFF_HEATERS
  M107
  M84
  CLEAR_PAUSE
  
[delayed_gcode init_shaper]
initial_duration: 0.1
gcode:
	{% if printer.configfile.config.dual_carriage is defined %}
		SET_DUAL_CARRIAGE CARRIAGE=1
		SET_INPUT_SHAPER SHAPER_TYPE_X=<dual_carriage_shaper> SHAPER_FREQ_X=<dual_carriage_freq> SHAPER_TYPE_Y=<y_shaper> SHAPER_FREQ_Y=<y_freq>
		SET_DUAL_CARRIAGE CARRIAGE=0
		SET_INPUT_SHAPER SHAPER_TYPE_X=<primary_carriage_shaper> SHAPER_FREQ_X=<primary_carriage_freq> SHAPER_TYPE_Y=<y_shaper> SHAPER_FREQ_Y=<y_freq>
	{% endif %}
[gcode_macro POST_COOLING_CYCLE] 
description:
  Макрос цикла пост-остывания
  DPH - на сколько охлаждать за 1 час 
  STEP - шаг охлаждения 
  START - начальное значение 
  END - конечное значение 
  Пример использования: POST_COOLING_CYCLE START=180 END=50
gcode: 
  {% set DPH = params.DPH|default(60)| int %} 
  {% set STEP = params.STEP|default(-2)| int %} 
  {% set START = params.START|default(75)| int %} 
  {% set END = params.END |default(30)| int %} 
 
  _PARK_{printer.toolhead.extruder}
  {% if START < END and STEP < 0 %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, STEP( %s ) должен быть %s " % (STEP, STEP | abs))} 
  {% elif START > END and STEP > 0 %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, STEP( %s ) должен быть %s " % (STEP, -STEP))} 
  {% elif START == END %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, START( %s ) не может быть равен END(%s) %s " % (START, END))} 
  {% elif STEP == 0 or DPH <= 0 %} 
    { action_respond_info("Невозможно использовать цикл пост-остывания, STEP( %s ) или DPH( %s ) не может быть 0 " % (STEP, DPH))} 
 
  {% else %}  
    {% if "xyz" in printer.toolhead.homed_axes %} 
      G90 
      G1 Z{printer.configfile.config.stepper_z.position_endstop} 
    {% endif %}
    M104 S0 ;выключить нагреватель хотэнда
    M140 S0 ;выключить нагреватель стола
    M106 S0 ;выключить вентилятор обдува модели
    SET_HEATER_TEMPERATURE HEATER=DAS TARGET=0
    {% if START > END %} 
      {% for temp in range(START, END, STEP) %} 
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={temp} 
        TEMPERATURE_WAIT SENSOR='heater_generic chamber' MAXIMUM={temp} 
        G4 P{3600 / DPH * 1000} 
      {% endfor %} 
    {% else %} 
      {% for temp in range(START, END, STEP) %} 
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={temp} 
        TEMPERATURE_WAIT SENSOR='heater_generic chamber' MINIMUM={temp} 
        G4 P{3600 / DPH * 1000} 
      {% endfor %} 
    {% endif %}   
  {% endif %}

# [gcode_macro DUMP_SENSORS]
# gcode:
#   {action_respond_info(printer.heaters.available_heaters|join(', '))}
#   {action_respond_info(printer.heaters.available_sensors|join(', '))}
  
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE1
gcode:
  {% set HEATER = params.HEATER|string %}
  {% set TARGET = params.TARGET|float %}

  # --- Температурные лимиты ---
  {% set heater_limits = {
    "DAS": 400,
    "DAS1": 400,
    "extruder": 500,
    "extruder1": 500,
    "heater_bed": 200,
    "heater_bed0": 200,
    "heater_bed1": 200,
    "heater_bed2": 200,
    "chamber": 250
  } %}

  {% set heater_beds = ["heater_bed0", "heater_bed1", "heater_bed2"] %}
  {% set fan_control = {
    "DAS": "extruder_fan",
    "DAS1": "extruder1_fan"
  } %}

  {% set limit = heater_limits.get(HEATER, 9999) %}
  {% if TARGET > limit %}
      {% if HEATER in heater_beds %}
        {% if printer["heater_generic chamber"].temperature|int > 200 %}
          M140 S{TARGET}
        {% else %}
          RESPOND TYPE=error MSG="Прогрейте термокамеру выше 200°."
        {% endif %}
      {% else %}
        RESPOND TYPE=error MSG="Невозможно установить выше максимума { limit }°."
      {% endif %}
  {% else %}
    # --- Включение вентилятора при необходимости ---
    {% if HEATER in fan_control %}
      {% set fan = fan_control[HEATER] %}
      {% if printer["fan_generic " ~ fan].speed <= 0 %}
        SET_FAN_SPEED FAN={fan} SPEED=0.5
      {% endif %}
    {% endif %}

    # --- Отключение --- 
    {% if TARGET <= 0 %}
      SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET=0
    {% else %}
      {% if HEATER in heater_beds %}
        M140 S{TARGET}
      {% else %}
        SET_HEATER_TEMPERATURE1 HEATER={HEATER} TARGET={TARGET}
      {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro M140]
gcode:
  {% set target = params.S|default(0)|float %}
  {% set beds = ["heater_bed0", "heater_bed1", "heater_bed2"] %}

  {% for bed in beds %}
    {% if printer.configfile.config["heater_generic " ~ bed] is defined %}
      SET_HEATER_TEMPERATURE1 HEATER={bed} TARGET={target}
    {% endif %}
  {% endfor %}
[gcode_macro M190]
gcode:
  {% set minimum = params.S|default(0)|float %}
  M140 S{minimum}
  {% set beds = ["heater_bed0", "heater_bed1", "heater_bed2"] %}
  {% for bed in beds %}
    {% if printer.configfile.config["heater_generic " ~ bed] is defined %}
      TEMPERATURE_WAIT SENSOR="heater_generic {bed}" MINIMUM={minimum}
    {% endif %}
  {% endfor %}

[gcode_macro M109]
rename_existing: M109.1
gcode:
  {% set extruder = "extruder" ~ params.T|replace('0', '')
     if "T" in params else printer.toolhead.extruder %}
  SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={params.S|default(0)|float}
  TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={params.S|default(0)|float}
[gcode_macro M104]
rename_existing: M104.1
gcode:
  {% set extruder = "extruder" ~ params.T|replace('0', '')
     if "T" in params else printer.toolhead.extruder %}
  SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={params.S|default(0)|float}
	
[gcode_macro M141]
gcode:
  SET_HEATER_TEMPERATURE HEATER=chamber TARGET={params.S|default(0)|float}
[gcode_macro M191]
gcode:
	M141 S{params.S|default(0)|float}
  TEMPERATURE_WAIT SENSOR='heater_generic chamber' MINIMUM={params.S|default(0)|float}
	
[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}
	
[gcode_macro PID_CALIBRATE]
rename_existing:PID_CALIBRATE_BASE
gcode:
  {% set heater = params.HEATER|string %}
  {% set target = params.TARGET|float %}
  {% if heater == "extruder" %}
    T0
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% elif heater == "extruder1" %}  
    T1
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% elif heater == "DAS" %}
    T0
    SET_HEATER_TEMPERATURE HEATER=DAS TARGET={target}
    PID_CALIBRATE_BASE HEATER=DAS TARGET={target}
  {% elif heater == "DAS1" %}
    T1
    SET_HEATER_TEMPERATURE HEATER=DAS1 TARGET={target}
    PID_CALIBRATE_BASE HEATER=DAS1 TARGET={target}
  {% elif heater == "heater_bed" %}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% elif heater == "heater_bed0" %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={target}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% elif heater == "heater_bed1" %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed0 TARGET={target}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% elif heater == "heater_bed2" %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed0 TARGET={target}
    SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={target}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% elif heater == "chamber" %}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target}
  {% endif %}
    TURN_OFF_HEATERS
    RESPOND MSG="Калибровка PID {heater} на температуру {target} завершена !"
    G4 P5000
    M107
    SAVE_CONFIG

[gcode_macro SET_FAN_SPEED]
rename_existing: SET_FAN_SPEED1
gcode:
  {% set fan = params.FAN|string %}
  {% set speed = params.SPEED|float %}

  # Сопоставление вентиляторов и соответствующих нагревателей
  {% set fan_heater_map = {
    "extruder_fan": "DAS",
    "extruder1_fan": "DAS1"
  } %}

  # Если скорость 0, выключаем нагреватель (если он есть и определён)
  {% if speed <= 0 and fan in fan_heater_map %}
    {% set heater = fan_heater_map[fan] %}
    {% if printer.configfile.config["heater_generic " ~ heater] is defined %}
      SET_HEATER_TEMPERATURE1 HEATER={heater} TARGET=0
    {% endif %}
  {% endif %}

  SET_FAN_SPEED1 FAN={fan} SPEED={speed}
[gcode_macro M106]
# rename_existing: M106.1
variable_last_speed: 0 # переменная хранящая последнюю заданную скорость, используется в IDEX 
gcode:
  {% set s = params.S|default(255)|int %}
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=last_speed VALUE={s}
  {% set speed = s / 255|float %} #перевод диапазона значений от 0..255 в 0..1
	SET_FAN_SPEED FAN={printer.toolhead.extruder}_fan SPEED={speed}
[gcode_macro M107]
gcode:
  M106 S0

[gcode_macro _PARK_extruder]
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    {% if "x" in printer.toolhead.homed_axes %}
      SAVE_GCODE_STATE NAME=park0
      SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
      G90
      G1 X{printer.configfile.config.stepper_x.position_endstop|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}     
      RESTORE_GCODE_STATE NAME=park0
    {% endif %}
  {% endif %}
[gcode_macro _PARK_extruder1]
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    {% if "x" in printer.toolhead.homed_axes %}
      SAVE_GCODE_STATE NAME=park1
      SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
      G90
      G1 X{printer.configfile.config.dual_carriage.position_endstop|int} F{printer.configfile.config.dual_carriage.homing_speed|int*60*2}
      RESTORE_GCODE_STATE NAME=park1
    {% endif %}
  {% endif %}
[gcode_macro T0]
gcode:
  _TOOL_SWITCH TOOL=0

[gcode_macro T1]
gcode:
  _TOOL_SWITCH TOOL=1

[gcode_macro _TOOL_SWITCH]
description: Универсальный макрос переключения кареток для T0 и T1
variable_tool: 0

gcode:
  {% set tool = params.TOOL|default(tool)|int %}
  {% set active_tool = 'extruder' if tool == 0 else 'extruder1' %}
  {% set inactive_tool = 'extruder1' if tool == 0 else 'extruder' %}
  {% set other_carriage = 1 if tool == 0 else 0 %}
  {% set current_state = printer.dual_carriage["carriage_" ~ other_carriage] %}
  {% set should_park = current_state in ["PRIMARY", "INACTIVE"] if tool == 0 else current_state == "PRIMARY" %}

  {% if printer.configfile.config.dual_carriage is defined %}
    {% if should_park %}
      _PARK_{inactive_tool}
    {% endif %}

    SET_DUAL_CARRIAGE CARRIAGE={tool}
    SET_STEPPER_ENABLE STEPPER={active_tool} ENABLE=1
    SET_STEPPER_ENABLE STEPPER={inactive_tool} ENABLE=0
    ACTIVATE_EXTRUDER EXTRUDER={active_tool}
    M106 S{printer["gcode_macro M106"].last_speed}
    _APPLY_OFFSETS
  {% endif %}

[gcode_macro INFO_OFFSETS]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set current_x1 =  svv.get("extruder1_offset_x") |float %}
  {% set current_y1 =  svv.get("extruder1_offset_y") |float %}
  {% set current_z1 =  svv.get("extruder1_offset_z") |float %} 
  RESPOND MSG="X1={current_x1} Y1={current_y1} Z1={current_z1}"
[gcode_macro SET_OFFSETS]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if 'X1' in params and params.X1!="" %}
		{% set new_offset_x1 = params.X1|float %}
		SAVE_VARIABLE VARIABLE=extruder1_offset_x VALUE={new_offset_x1}
    RESPOND MSG="Новое смещение второго экструдера по X равно {new_offset_x1}"
  {%endif%}
  {% if 'Y1' in params and params.Y1!="" %}
		{% set new_offset_y1 = params.Y1|float %}
		SAVE_VARIABLE VARIABLE=extruder1_offset_y VALUE={new_offset_y1}
		RESPOND MSG="Новое смещение второго экструдера по Y равно {new_offset_y1}"
  {%endif%}
[gcode_macro _APPLY_OFFSETS]
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    {% set svv = printer.save_variables.variables %}
    {% set x1 = svv.get("extruder1_offset_x") |float %}
    {% set y1 = svv.get("extruder1_offset_y") |float %}
    {% set z1 = svv.get("extruder1_offset_z") |float %}
    {% if printer.toolhead.extruder == "extruder"%}
      SET_GCODE_OFFSET X=0 Y=0 MOVE=0 # Z=0 
    {% else %}
      SET_GCODE_OFFSET X={x1} Y={y1} MOVE=0 #Z={z1}
    {% endif %}
  {% endif %}
	
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  {% set other_extruder = printer.toolhead.extruder %}
  T0
	_CALIBRATE_Z_HEIGHT
	BED_MESH_CALIBRATE_BASE PROFILE={printer['heater_generic heater_bed0'].target|string ~ "°" if printer['heater_generic heater_bed0'].target|int > 0 else "Текущий" } #ADAPTIVE=1
  _PARK_extruder
  T{ "0" if other_extruder == "extruder" else "1" }
  # RESPOND  MSG="Калибровка сетки стола завершена"
	
[gcode_macro _START_PRINT]
description:
  EXTRUDER_TEMP - температура экструдера
  BED_TEMP - температура стола
  CHAMBER_TEMP - температура термокамеры

  Пример использования:
    CURA:  _START_PRINT EXTRUDER_TEMP= BED_TEMP= START_CHAMBER_TEMP= CHAMBER_TEMP= INITIAL_TOOL= X0= Y0= X1= Y1=
    PRUSA: _START_PRINT EXTRUDER_TEMP={first_layer_temperature[0]},{first_layer_temperature[1]} BED_TEMP=[first_layer_bed_temperature] START_CHAMBER_TEMP=[chamber_temperature] CHAMBER_TEMP=[chamber_temperature] INITIAL_TOOL={initial_tool} X0={first_layer_print_min[0]} Y0={first_layer_print_min[1]} X1={first_layer_print_max[0]} Y1={first_layer_print_max[1]}
    ORCA:  _START_PRINT EXTRUDER_TEMP= BED_TEMP= START_CHAMBER_TEMP= CHAMBER_TEMP= INITIAL_TOOL= X0= Y0= X1= Y1=
gcode:
  CLEAR_PAUSE
  # --- Параметры из слайсера ---
  {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}

  {% set raw_temp = params.EXTRUDER_TEMP %}
  {% if ',' in raw_temp %}
    {% set extruder_temp = raw_temp.split(',') | map('float') | list %}
  {% else %}
    {% set extruder_temp = [raw_temp | float] %}
  {% endif %}
  
  {% set bed_temp = params.BED_TEMP|float %}
  {% set chamber_temp = params.CHAMBER_TEMP|float %}
  {% set x0 = params.X0|float %}
  {% set y0 = params.Y0|float %}
  {% set x1 = params.X1|float %}
  {% set y1 = params.Y1|float %}

  # --- Конфигурационные границы ---
  {% set x_min = printer.configfile.config.stepper_x.position_min|float %}
  {% set x_max = printer.configfile.config.stepper_x.position_max|float %}
  {% set y_min = printer.configfile.config.stepper_y.position_min|float %}
  {% set y_max = printer.configfile.config.stepper_y.position_max|float %}
  {% set dc_max = printer.configfile.config.dual_carriage.position_max|float if printer.configfile.config.dual_carriage is defined else x_max %}

  # --- Определение текущего режима IDEX ---
  {% if printer["gcode_macro IDEX_MODE"].mode_single %}
    {% set current_mode = "single" %}
  {% elif printer["gcode_macro IDEX_MODE"].mode_copy %}
    {% set current_mode = "copy" %}
  {% elif printer["gcode_macro IDEX_MODE"].mode_mirror %}
    {% set current_mode = "mirror" %}
  {% else %}
    {% set current_mode = "unknown" %}
  {% endif %}

  # --- Макрос проверки границ печати ---
  {% macro check_bounds(x0, x1, y0, y1, x_limit) %}
    {% if x0 < x_min %}
      RESPOND TYPE=error MSG="Деталь за пределами: +X."
    {% elif y0 < y_min %}
      RESPOND TYPE=error MSG="Деталь за пределами: +Y."
    {% elif y1 > y_max %}
      RESPOND TYPE=error MSG="Деталь за пределами: -Y."
    {% elif x1 > x_limit %}
      RESPOND TYPE=error MSG="Деталь за пределами: -X."
    # {% else %}
      # { return(true) }
    {% endif %}
    # { return(false) }
  {% endmacro %}

  # --- Обработка по режимам ---
  {% if current_mode == "single" %}
    RESPOND MSG="Текущий режим: Обычный."
    {% if check_bounds(x0, x1, y0, y1, x_max) %}
      M191 S{chamber_temp}
      M190 S{bed_temp}
      BED_MESH_CALIBRATE
      T{initial_tool}
      M109 S{extruder_temp[initial_tool]} T{initial_tool}
    {% endif %}

  {% elif current_mode == "copy" %}
    RESPOND MSG="Текущий режим: Копирующий.
    {% if check_bounds(x0, x1, y0, y1, x_max / 2) %}
      G28
      M191 S{chamber_temp}
      M190 S{bed_temp}
      _CALIBRATE_Z_HEIGHT
      ACTIVATE_COPY_MODE
      M109 S{extruder_temp[0]} T0
      M109 S{extruder_temp[1]} T1
    {% endif %}

  {% elif current_mode == "mirror" %}
    RESPOND MSG="Текущий режим: Зеркальный."
    {% set mirror_limit = (x_max / 2) - (dc_max - x_max) %}
    {% if check_bounds(x0, x1, y0, y1, mirror_limit) %}
      G28
      M191 S{chamber_temp}
      M190 S{bed_temp}
      _CALIBRATE_Z_HEIGHT
      ACTIVATE_MIRROR_MODE
      M109 S{extruder_temp[0]} T0
      M109 S{extruder_temp[1]} T1
    {% endif %}

  {% else %}
    RESPOND TYPE=error MSG="Режим IDEX не выбран или неизвестен."
  {% endif %}


[gcode_macro _END_PRINT]
gcode:
  G92 E0
  TURN_OFF_HEATERS
	G91
	G1 E-2 F{60*30}
  G90 
  G1 Z{printer.configfile.config.stepper_z.position_endstop|int - 2} F{printer.configfile.settings.printer.max_z_velocity * 60}
  G28 X
  {% if printer.configfile.config['neopixel status_bar'] is defined %}
    SET_LED LED=status_bar GREEN=1 RED=0 BLUE=0
  {% endif %}
  RESPOND  MSG="Печать завершена!"
  SET_IDLE_TIMEOUT TIMEOUT=600

[gcode_macro ACTIVATE_COPY_MODE]
description: Активация режима копирования
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    T0
    _PARK_extruder
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    SAVE_GCODE_STATE NAME=park1
    G90
    G1 X{(printer.configfile.config.stepper_x.position_max|int / 2) - 100} F{printer.configfile.config.dual_carriage.homing_speed|int*60*3}
    RESTORE_GCODE_STATE NAME=park1
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    # синхронизируем вентиляторы:
    M106 S{printer["gcode_macro M106"].last_speed}
  {% endif %}
[gcode_macro ACTIVATE_MIRROR_MODE]
description: Активация режима зеркального копирования
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    T0
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    _PARK_extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    # синхронизируем вентиляторы:
    M106 S{printer["gcode_macro M106"].last_speed}
  {% endif %}
[gcode_macro IDEX_PRIMARY_MODE]
description: Активация режима независимого управления каретками
gcode:
  {% if printer.configfile.config.dual_carriage is defined %}
    _PARK_extruder1
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=''
    _PARK_extruder
    T0
  {% endif %}

[gcode_macro _CLEAN_NOZZLE]
variable_wipe_qty: 2
variable_wipe_spd: 150

gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  SAVE_GCODE_STATE NAME=CLEAN
  {% if printer.toolhead.extruder == "extruder"%}
    G90          
    {% set start_x=printer.configfile.config.stepper_x.position_endstop|int + 20 %}       
    {% set start_y=printer.configfile.config.stepper_y.position_endstop|int - 2 %} 
    G1 X{start_x} Y{start_y} F{printer.configfile.config.stepper_x.homing_speed|int*60}
    {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x + 3} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x + 28} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x + 3} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x + 28} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x + 3} Y{start_y} F{wipe_spd * 300}
    {% endfor %}
    G1 X{start_x} Y{start_y} F{printer.configfile.config.stepper_x.homing_speed|int*60}
    G92 E0
    SET_FAN_SPEED FAN=extruder_fan SPEED=0.5
    G4 P1000
    G1 E25 F{5*60}
    G4 P2000
    G1 E23 F{25*60}
    {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x + 3} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x + 28} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x + 3} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x + 28} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x + 3} Y{start_y} F{wipe_spd * 300}
    {% endfor %}
    # G1 E25 F{25*60}
    G92 E0
    SET_FAN_SPEED FAN=extruder_fan SPEED=0
    G1 X{start_x} Y{start_y} F{printer.configfile.config.stepper_x.homing_speed|int*60}

  {% else %}
    T1
    G90          
    {% set start_x=printer.configfile.config.dual_carriage.position_endstop|int - 22.5 %}       
    {% set start_y=printer.configfile.config.stepper_y.position_endstop|int - 2 %} 
    G1 X{start_x} Y{start_y} F{printer.configfile.config.stepper_x.homing_speed|int*60}
    {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x -3} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x - 28} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x - 3} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x - 28} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x - 3} Y{start_y} F{wipe_spd * 300}
    {% endfor %}
    G1 X{start_x} Y{start_y} F{printer.configfile.config.stepper_x.homing_speed|int*60}
    G92 E0
    SET_FAN_SPEED FAN=extruder1_fan SPEED=0.5
    G4 P1000
    G1 E25 F{5*60}
    G4 P2000
    G1 E23 F{25*60}
    {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x - 3} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x - 28} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x - 3} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x - 28} Y{start_y} F{wipe_spd * 300}
    G1 X{start_x - 3} Y{start_y} F{wipe_spd * 300}
    {% endfor %}
    # G1 E25 F{25*60}
    G92 E0
    SET_FAN_SPEED FAN=extruder1_fan SPEED=0
    G1 X{start_x} Y{start_y} F{printer.configfile.config.dual_carriage.homing_speed|int*60}
  {% endif %}
  _PARK_{printer.toolhead.extruder}
  RESTORE_GCODE_STATE NAME=CLEAN

[gcode_macro CANCEL_PRINT]
description: Отмена текущей печати
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  M107
  G90 
  G1 Z{printer.configfile.config.stepper_z.position_max|int - 2 } F{printer.configfile.settings.printer.max_z_velocity*60}
  _PARK_{printer.toolhead.extruder}
  M84
  RESPOND TYPE=error MSG=" Печать отменена !"
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_extrude: 1.0
gcode:
  {% if printer.print_stats.filename != "" %}
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% if printer.toolhead.extruder == "extruder"%}
      {% set x_park = printer.configfile.config.stepper_x.position_endstop|int %}
    {% else %}
      {% set x_park = printer.configfile.config.dual_carriage.position_endstop|int %}
    {% endif %}
      ##### calculate save lift position #####
      {% set max_z = printer.configfile.config.stepper_z.position_max|float %}
      {% set act_z = printer.toolhead.position.z|float %}
      {% if act_z < (max_z - 20) %}
         {% set z_safe = 20 %}
      {% else %}
         {% set z_safe = max_z - act_z %}
     {% endif %}
      PAUSE_BASE
     M118 Пауза!
     G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{E} F2100
     {% else %}
       {action_respond_info("Экструдер недостаточно горячий")}
     {% endif %}
      {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe} F{printer.configfile.config.stepper_z.homing_speed|int*60}
        G90
        G1 X{x_park} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
      {% else %}
        {action_respond_info("Парковка не выполнена")}
      {% endif %}

  {% endif %}
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {% else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Экструдер недостаточно горячий")}
  {% endif %}  
  RESUME_BASE {get_params}
  M118 Продолжение печати!

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  100
gcode:
  {% set speed = params.SPEED|default(450) %}
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
  SAVE_GCODE_STATE NAME=load_state
  G91
  G92 E0
  G1 E{load_distance} F{speed} ; extrude with 7.5mm/s
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  75
gcode:
  {% set speed = params.SPEED|default(450) %}
  SAVE_GCODE_STATE NAME=unload_state
  G91
  G92 E0
  G1 E-{unload_distance} F{speed} ; unload
  RESTORE_GCODE_STATE NAME=unload_state

# [gcode_macro TOOLSHIFT]
# gcode:
#   {% if printer.configfile.config.dual_carriage is defined %}
#       {% if printer.dual_carriage.carriage_0 == "PRIMARY" %}
#         {% set dist = printer.configfile.config.dual_carriage.position_endstop|int - printer.toolhead.position.x|int %}
#         SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#         SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
#         {% if printer.toolhead.position.x|int >= printer.configfile.config.stepper_x.position_max|int / 2  %} #Каретка по середине или правее?
#           SAVE_GCODE_STATE NAME=activate1
#           G90
#           G1 X{printer.toolhead.position.x|int - dist} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=activate1
#           SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#           SAVE_GCODE_STATE NAME=park0
#           G90
#           G1 X{printer.configfile.config.stepper_x.position_endstop|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
#           RESTORE_GCODE_STATE NAME=park0
#         {% else %}
#           SAVE_GCODE_STATE NAME=park0
#           G90
#           G1 X{printer.configfile.config.stepper_x.position_endstop|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=park0
#           SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
#           SAVE_GCODE_STATE NAME=activate1
#           G90
#           G1 X{dist} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=activate1
#         {% endif %}
#       {% endif %}

#       {% if printer.dual_carriage.carriage_1 == "PRIMARY" %}
#         {% set dist = printer.toolhead.position.x|int - printer.configfile.config.stepper_x.position_endstop|int %}
#         SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#         SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
#         {% if printer.toolhead.position.x|int >= printer.configfile.config.stepper_x.position_max|int / 2  %}
#           SAVE_GCODE_STATE NAME=activate1
#           G90
#           G1 X{printer.configfile.config.dual_carriage.position_endstop|int - printer.toolhead.position.x|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=activate1
#           SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#           SAVE_GCODE_STATE NAME=park0
#           G90
#           G1 X{dist} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
#           RESTORE_GCODE_STATE NAME=park0
#         {% else %}
#           SAVE_GCODE_STATE NAME=park0
#           G90
#           G1 X{printer.toolhead.position.x|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           RESTORE_GCODE_STATE NAME=park0
#           SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
#           SAVE_GCODE_STATE NAME=activate1
#           G90
#           G1 X{printer.configfile.config.dual_carriage.position_endstop|int} F{printer.configfile.config.stepper_x.homing_speed|int*60*2}
#           SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
#           RESTORE_GCODE_STATE NAME=activate1
#         {% endif %}
#       {% endif %}

#   {% endif %}